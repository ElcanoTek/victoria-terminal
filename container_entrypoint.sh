#!/usr/bin/env bash
set -euo pipefail

USERNAME=victoria
DEFAULT_CMD=("python3" "/workspace/victoria_terminal.py")

configure_runtime_environment() {
    local preferred_home
    local fallback_home="/workspace/.victoria-home"

    if [[ -n "${VICTORIA_HOME:-}" ]]; then
        preferred_home="${VICTORIA_HOME}"
    else
        preferred_home="/home/${USERNAME}"
    fi

    mkdir -p "${preferred_home}" 2>/dev/null || true

    if [[ ! -w "${preferred_home}" || ! -x "${preferred_home}" ]]; then
        preferred_home="${fallback_home}"
        mkdir -p "${preferred_home}"
    fi

    if [[ ! -f "${preferred_home}/.bashrc" ]]; then
        cat <<'EOF' >"${preferred_home}/.bashrc"
# ~/.bashrc – generated by the Victoria container entrypoint
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
EOF
    fi

    if [[ ! -d "${preferred_home}/.local/share/crush" ]]; then
        mkdir -p "${preferred_home}/.local/share/crush"
    fi

    if [[ ! -f "${preferred_home}/.local/share/crush/crush.json" ]]; then
        cp /workspace/configs/crush/crush.local.json "${preferred_home}/.local/share/crush/crush.json"
    fi

    export HOME="${preferred_home}"

    case ":${PATH}:" in
        *:"${HOME}/.local/bin":*) ;;
        *) export PATH="${HOME}/.local/bin:${PATH}" ;;
    esac
}

# When running as root, adapt the container to the user's UID and GID.
# This ensures that the user has the correct permissions to work with the
# mounted /workspace directory.
if [ "$(id -u)" = "0" ]; then
    # Get the UID and GID of the /workspace directory.
    TARGET_UID=$(stat -c "%u" /workspace)
    TARGET_GID=$(stat -c "%g" /workspace)

    # Change the UID and GID of the victoria user to match the target.
    # The --non-unique flag is omitted to prevent potential security issues.
    groupmod --gid "${TARGET_GID}" "${USERNAME}"
    usermod --uid "${TARGET_UID}" --gid "${TARGET_GID}" "${USERNAME}"

    # Ensure the remapped user can read and write its home directory contents.
    # The Crush bootstrap config ships with restrictive permissions, so without
    # updating ownership the mapped UID would fail to read it and exit with the
    # "permission denied" error reported by users.
    chown -R "${TARGET_UID}:${TARGET_GID}" "/home/${USERNAME}"

    # Re-execute the script as the victoria user, preserving the environment.
    # The `setpriv` command is used to drop root privileges and execute the
    # command in a new security context.
    exec setpriv --reuid "${TARGET_UID}" --regid "${TARGET_GID}" --init-groups "$0" "$@"
fi

configure_runtime_environment

# If no arguments were provided, launch Victoria.
if [[ $# -eq 0 ]]; then
    exec "${DEFAULT_CMD[@]}"
fi

# Handle a bare `--` separator used to distinguish container options from application arguments.
# This follows standard Unix conventions where `--` signals the end of options processing.
# Using `--` is the recommended way to pass arguments to Victoria to avoid confusion
# between Podman container options and Victoria application flags.
if [[ "$1" == "--" ]]; then
    shift
fi

# If nothing remains after stripping `--`, fall back to Victoria.
if [[ $# -eq 0 ]]; then
    exec "${DEFAULT_CMD[@]}"
fi

# Treat leading flags as arguments for Victoria.
if [[ "$1" == -* ]]; then
    exec "${DEFAULT_CMD[@]}" "$@"
fi

# If the first argument is an executable on PATH, run it directly. This allows
# commands such as `podman run … bash` to spawn an interactive shell.
if command -v "$1" >/dev/null 2>&1; then
    exec "$@"
fi

# Fallback: run Victoria with the provided arguments.
exec "${DEFAULT_CMD[@]}" "$@"
